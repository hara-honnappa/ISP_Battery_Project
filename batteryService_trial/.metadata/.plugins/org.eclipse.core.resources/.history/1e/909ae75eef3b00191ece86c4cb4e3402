/**********************************************************************************************
 * Filename:       batteryService.c
 *
 * Description:    This file contains the implementation of the service.
 *
 * Copyright (c) 2015-2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *************************************************************************************************/


/*********************************************************************
 * INCLUDES
 */
#include <string.h>

#include <icall.h>

/* This Header file contains all BLE API and icall structure definition */
#include "icall_ble_api.h"

#include "batteryService.h"

/*********************************************************************
 * MACROS
 */

/*********************************************************************
 * CONSTANTS
 */

/*********************************************************************
 * TYPEDEFS
 */

/*********************************************************************
* GLOBAL VARIABLES
*/

// ICall taskID
uint8_t responseTaskID = INVALID_TASK_ID;
// batteryService Service UUID
CONST uint8_t batteryServiceUUID[ATT_BT_UUID_SIZE] =
{
  LO_UINT16(BATTERYSERVICE_SERV_UUID), HI_UINT16(BATTERYSERVICE_SERV_UUID)
};

// batteryService Characteristic1 UUID
CONST uint8_t batteryServiceChar1UUID[ATT_BT_UUID_SIZE] =
{
  LO_UINT16(BATTERYSERVICE_CHAR1_UUID), HI_UINT16(BATTERYSERVICE_CHAR1_UUID)
};



/*********************************************************************
 * LOCAL VARIABLES
 */

static batteryServiceCBs_t *pAppCBs = NULL;

/*********************************************************************
* Profile Attributes - variables
*/

// Service declaration
static CONST gattAttrType_t batteryServiceDecl = { ATT_BT_UUID_SIZE, batteryServiceUUID };

// Characteristic 1 - Battery Mode Properties
static uint8_t batteryServiceChar1Props = GATT_PROP_READ;

// Characteristic 1 - Battery Mode Value
static uint16_t batteryServiceChar1Val = 0;

// Characteristic 1 Voltage Configuration
// Each client has its own instantiation of the Client Characteristic
// Configuration. Reads of the Client Characteristic Configuration
// only shows the configuration for that client and writes only affect
// the configuration of that client.

static gattCharCfg_t *batteryServiceChar1Config;

// Characteristic 1 - Battery Mode User Description
static uint8_t batteryServiceChar1String[13] = "Voltage";

/*********************************************************************
* Profile Attributes - Table
*/

static gattAttribute_t batteryServiceAttrTbl[] =
{
  // batteryService Service Declaration
  {
    { ATT_BT_UUID_SIZE, primaryServiceUUID },
    GATT_PERMIT_READ,
    0,
    (uint8_t *)&batteryServiceDecl
  },

  // batteryService characteristic1 declaration
  {
    { ATT_BT_UUID_SIZE, characterUUID },
    GATT_PERMIT_READ,
    0,
    (uint8_t *)&batteryServiceChar1Props
  },
  // batteryService characteristic1 value
  {
    { ATT_BT_UUID_SIZE, batteryServiceChar1UUID },
    GATT_PERMIT_READ,
    0,
    (uint8_t *)&batteryServiceChar1Val
  },
  // batteryService characteristic1 description
  {
    { ATT_BT_UUID_SIZE, charUserDescUUID },
    GATT_PERMIT_READ,
    0,
    (uint8_t *)&batteryServiceChar1String
  },

};

/*********************************************************************
 * LOCAL FUNCTIONS
 */
static bStatus_t batteryService_ReadAttrCB( uint16_t connHandle, gattAttribute_t *pAttr,
                                           uint8_t *pValue, uint16_t *pLen, uint16_t offset,
                                           uint16_t maxLen, uint8_t method );
static bStatus_t batteryService_WriteAttrCB( uint16_t connHandle, gattAttribute_t *pAttr,
                                            uint8_t *pValue, uint16_t len, uint16_t offset,
                                            uint8_t method );

/*********************************************************************
 * PROFILE CALLBACKS
 */
// Simple Profile Service Callbacks
CONST gattServiceCBs_t batteryServiceCBs =
{
  batteryService_ReadAttrCB,  // Read callback function pointer
  batteryService_WriteAttrCB, // Write callback function pointer
  NULL                       // Authorization callback function pointer
};

/*********************************************************************
* PUBLIC FUNCTIONS
*/
void updateChar1Val(uint16_t val)
{
    batteryServiceChar1Val = val;
}

/*
 * BatteryService_AddService- Initializes the BatteryService service by registering
 *          GATT attributes with the GATT server.
 *
 */
extern bStatus_t BatteryService_AddService( uint8_t rspTaskId )
{
  uint8_t status;

  // Allocate Client Characteristic Configuration table
  batteryServiceChar1Config = (gattCharCfg_t *)ICall_malloc( sizeof(gattCharCfg_t) *
                                                            linkDBNumConns );
  if ( batteryServiceChar1Config == NULL )
  {
    return ( bleMemAllocError );
  }

  // Initialize Client Characteristic Configuration attributes
  GATTServApp_InitCharCfg( INVALID_CONNHANDLE, batteryServiceChar3Config );

  // Register GATT attribute list and CBs with GATT Server App
  status = GATTServApp_RegisterService( batteryServiceAttrTbl,
                                        GATT_NUM_ATTRS( batteryServiceAttrTbl ),
                                        GATT_MAX_ENCRYPT_KEY_SIZE,
                                        &batteryServiceCBs );

  responseTaskID = rspTaskId;
  return ( status );
}

/*
 * BatteryService_RegisterAppCBs - Registers the application callback function.
 *                    Only call this function once.
 *
 *    appCallbacks - pointer to application callbacks.
 */
bStatus_t BatteryService_RegisterAppCBs( batteryServiceCBs_t *appCallbacks )
{
  if ( appCallbacks )
  {
    pAppCBs = appCallbacks;

    return ( SUCCESS );
  }
  else
  {
    return ( bleAlreadyInRequestedMode );
  }
}

/*
 * BatteryService_SetParameter - Set a BatteryService parameter.
 *
 *    param - Profile parameter ID
 *    len - length of data to right
 *    value - pointer to data to write.  This is dependent on
 *          the parameter ID and WILL be cast to the appropriate
 *          data type (example: data type of uint16 will be cast to
 *          uint16 pointer).
 */
bStatus_t BatteryService_SetParameter( uint32_t param, uint16_t len, void *value )
{
  bStatus_t ret = SUCCESS;
  switch ( param )
  {
  case BATTERYSERVICE_CHAR1_UUID:
      memcpy(&batteryServiceChar1Val, (uint16_t*)value, len);
//      batteryServiceChar1Val = *(uint16_t*)value;
      break;
  case BATTERYSERVICE_CHAR2_UUID:
      memcpy(&batteryServiceChar2Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR3_UUID:
//      memcpy(&batteryServiceChar3Val, (uint16_t*)value, len);
      batteryServiceChar3Val = *((uint16_t*)value);
      // Send Notification if it has been enabled
      ret = GATTServApp_ProcessCharCfg( batteryServiceChar3Config, (uint8_t*)&batteryServiceChar3Val, FALSE,
                                  batteryServiceAttrTbl, GATT_NUM_ATTRS( batteryServiceAttrTbl ),
                                  responseTaskID, batteryService_ReadAttrCB );
      break;
  case BATTERYSERVICE_CHAR4_UUID:
      memcpy(&batteryServiceChar4Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR5_UUID:
      memcpy(&batteryServiceChar5Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR6_UUID:
      memcpy(&batteryServiceChar6Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR7_UUID:
      memcpy(&batteryServiceChar7Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR8_UUID:
      memcpy(&batteryServiceChar8Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR9_UUID:
      memcpy(&batteryServiceChar9Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR10_UUID:
      memcpy(&batteryServiceChar10Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR11_UUID:
      memcpy(&batteryServiceChar11Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR12_UUID:
      memcpy(&batteryServiceChar12Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR13_UUID:
      memcpy(&batteryServiceChar13Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR14_UUID:
      memcpy(&batteryServiceChar14Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR15_UUID:
      memcpy(&batteryServiceChar15Val, (uint8_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR16_UUID:
      memcpy(&batteryServiceChar16Val, (uint8_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR17_UUID:
      memcpy(&batteryServiceChar17Val, (uint8_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR18_UUID:
      memcpy(&batteryServiceChar18Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR19_UUID:
      memcpy(&batteryServiceChar19Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR20_UUID:
      memcpy(&batteryServiceChar20Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR21_UUID:
      memcpy(&batteryServiceChar21Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR22_UUID:
      memcpy(&batteryServiceChar22Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR23_UUID:
      memcpy(&batteryServiceChar23Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR24_UUID:
      memcpy(&batteryServiceChar24Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR25_UUID:
      memcpy(&batteryServiceChar25Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR26_UUID:
      memcpy(&batteryServiceChar26Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR27_UUID:
      memcpy(&batteryServiceChar27Val, (uint16_t*)value, len);
      break;
  case BATTERYSERVICE_CHAR28_UUID:
      memcpy(&batteryServiceChar28Val, (uint16_t*)value, len);
      break;
    default:
      ret = INVALIDPARAMETER;
      break;
  }
  return ret;
}


/*
 * BatteryService_GetParameter - Get a BatteryService parameter.
 *
 *    param - Profile parameter ID
 *    value - pointer to data to write.  This is dependent on
 *          the parameter ID and WILL be cast to the appropriate
 *          data type (example: data type of uint16 will be cast to
 *          uint16 pointer).
 */
bStatus_t BatteryService_GetParameter( uint32_t param, uint16_t *len, void *value )
{
  bStatus_t ret = SUCCESS;
  switch ( param )
  {
    case BATTERYSERVICE_CHAR1_UUID:
      memcpy(value, &batteryServiceChar1Val, *len);
      break;
    default:
      ret = INVALIDPARAMETER;
      break;
  }
  return ret;
}


/*********************************************************************
 * @fn          batteryService_ReadAttrCB
 *
 * @brief       Read an attribute.
 *
 * @param       connHandle - connection message was received on
 * @param       pAttr - pointer to attribute
 * @param       pValue - pointer to data to be read
 * @param       pLen - length of data to be read
 * @param       offset - offset of the first octet to be read
 * @param       maxLen - maximum length of data to be read
 * @param       method - type of read message
 *
 * @return      SUCCESS, blePending or Failure
 */
static bStatus_t batteryService_ReadAttrCB( uint16_t connHandle, gattAttribute_t *pAttr,
                                       uint8_t *pValue, uint16_t *pLen, uint16_t offset,
                                       uint16_t maxLen, uint8_t method )
{
  bStatus_t status = SUCCESS;

  if(offset > 0)
  {
      // no attributes are long enough to require a offset
      *pLen = 0;
      status = ATT_ERR_ATTR_NOT_FOUND;

  }

  if(pAttr->type.len == ATT_BT_UUID_SIZE)
  {
      uint16 uuid = BUILD_UINT16( pAttr->type.uuid[0], pAttr->type.uuid[1]);
      switch(uuid)
      {
      case BATTERYSERVICE_CHAR1_UUID:
      case BATTERYSERVICE_CHAR2_UUID:
      case BATTERYSERVICE_CHAR3_UUID:
      case BATTERYSERVICE_CHAR4_UUID:
      case BATTERYSERVICE_CHAR5_UUID:
      case BATTERYSERVICE_CHAR6_UUID:
      case BATTERYSERVICE_CHAR7_UUID:
      case BATTERYSERVICE_CHAR8_UUID:
      case BATTERYSERVICE_CHAR9_UUID:
      case BATTERYSERVICE_CHAR10_UUID:
      case BATTERYSERVICE_CHAR11_UUID:
      case BATTERYSERVICE_CHAR12_UUID:
      case BATTERYSERVICE_CHAR13_UUID:
      case BATTERYSERVICE_CHAR14_UUID:
          *pLen = 2;
          memcpy(pValue, pAttr->pValue, *pLen);
          break;
      case BATTERYSERVICE_CHAR15_UUID:
      case BATTERYSERVICE_CHAR16_UUID:
      case BATTERYSERVICE_CHAR18_UUID:
      case BATTERYSERVICE_CHAR19_UUID:
      case BATTERYSERVICE_CHAR20_UUID:
      case BATTERYSERVICE_CHAR21_UUID:
      case BATTERYSERVICE_CHAR22_UUID:
      case BATTERYSERVICE_CHAR23_UUID:
      case BATTERYSERVICE_CHAR24_UUID:
      case BATTERYSERVICE_CHAR25_UUID:
      case BATTERYSERVICE_CHAR26_UUID:
      case BATTERYSERVICE_CHAR27_UUID:
      case BATTERYSERVICE_CHAR28_UUID:
          *pLen = 20;
          memcpy(pValue, pAttr->pValue, *pLen);
          break;
      case BATTERYSERVICE_CHAR17_UUID:
          *pLen = 4;
          memcpy(pValue, pAttr->pValue, *pLen);
          break;
      default:
          *pLen = 0;
          status = ATT_ERR_ATTR_NOT_FOUND;
          break;
      }
  }
  else
  {
    // If we get here, that means you've forgotten to add an if clause for a
    // characteristic value attribute in the attribute table that has READ permissions.
    *pLen = 0;
    status = ATT_ERR_ATTR_NOT_FOUND;
  }

  return status;
}


/*********************************************************************
 * @fn      batteryService_WriteAttrCB
 *
 * @brief   Validate attribute data prior to a write operation
 *
 * @param   connHandle - connection message was received on
 * @param   pAttr - pointer to attribute
 * @param   pValue - pointer to data to be written
 * @param   len - length of data
 * @param   offset - offset of the first octet to be written
 * @param   method - type of write message
 *
 * @return  SUCCESS, blePending or Failure
 */
static bStatus_t batteryService_WriteAttrCB( uint16_t connHandle, gattAttribute_t *pAttr,
                                        uint8_t *pValue, uint16_t len, uint16_t offset,
                                        uint8_t method )
{
  bStatus_t status  = SUCCESS;
  uint8_t   paramID = 0xFF;

  // See if request is regarding a Client Characterisic Configuration
  if ( ! memcmp(pAttr->type.uuid, clientCharCfgUUID, pAttr->type.len) )
  {
    // Allow only notifications.
    status = GATTServApp_ProcessCCCWriteReq( connHandle, pAttr, pValue, len,
                                             offset, GATT_CLIENT_CFG_NOTIFY|GATT_CLIENT_CFG_INDICATE);
  }
  else
  {
    // If we get here, that means you've forgotten to add an if clause for a
    // characteristic value attribute in the attribute table that has WRITE permissions.
    status = ATT_ERR_ATTR_NOT_FOUND;
  }

  // Let the application know something changed (if it did) by using the
  // callback it registered earlier (if it did).
  if (paramID != 0xFF)
    if ( pAppCBs && pAppCBs->pfnChangeCb )
      pAppCBs->pfnChangeCb(connHandle, paramID, len, pValue); // Call app function from stack task context.

  return status;
}
